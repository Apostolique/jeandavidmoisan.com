{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Jean-David Moisan",
  "language": "en",
  "home_page_url": "https://jeandavidmoisan.com/",
  "feed_url": "https://jeandavidmoisan.com/feed/feed.json",
  "description": "I have fun with code.",
  "author": {
    "name": "Jean-David Moisan",
    "url": "https://jeandavidmoisan.com/about-me/"
  },
  "items": [{
      "id": "https://jeandavidmoisan.com/posts/csharp-crash-course/",
      "url": "https://jeandavidmoisan.com/posts/csharp-crash-course/",
      "title": "C# Crash Course",
      "content_html": "<p>When I want to learn a new language, there's usually a series of steps I'll take before I can be productive. I'm writing this article based on what I'd find useful if I wanted to learn C# from scratch.</p>\n<p>I'll be focusing on .NET Core in this post. It's cross-platform and open source.</p>\n<h2 id=\"index\" tabindex=\"-1\">Index <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#index\" aria-hidden=\"true\">#</a></h2>\n<ul>\n<li><a href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#things-to-download\">Things to download</a></li>\n<li><a href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#your-first-project\">Your first project</a></li>\n<li><a href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#types\">Types</a></li>\n<li><a href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#methods\">Methods</a></li>\n<li><a href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#if\">If</a></li>\n<li><a href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#loops\">Loops</a></li>\n<li><a href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#classes\">Classes</a></li>\n<li><a href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#nuget\">NuGet</a></li>\n</ul>\n<h2 id=\"things-to-download\" tabindex=\"-1\">Things to download <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#things-to-download\" aria-hidden=\"true\">#</a></h2>\n<ul>\n<li><a href=\"https://dotnet.microsoft.com/download\" target=\"_blank\" rel=\"noopener noreferrer\">.NET Core SDK</a></li>\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer\">vscode</a>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp\" target=\"_blank\" rel=\"noopener noreferrer\">C# extension</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Leopotam.csharpfixformat\" target=\"_blank\" rel=\"noopener noreferrer\">C# FixFormat extension</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=k--kato.docomment\" target=\"_blank\" rel=\"noopener noreferrer\">C# XML Documentation Comments extension</a></li>\n</ul>\n</li>\n</ul>\n<p>Once the above have been installed, your computer is ready for C# development. To verify, open your terminal and run:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"bash\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span></span>dotnet <span class=\"token parameter variable\">--version</span>\n</code></pre></div></div><p>At the time that I'm writing this, my version is <code>3.1.403</code>.</p>\n<h2 id=\"your-first-project\" tabindex=\"-1\">Your first project <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#your-first-project\" aria-hidden=\"true\">#</a></h2>\n<p>Now that we have that out of the way, let's get a new project started:</p>\n<ol>\n<li>Create a folder somewhere, call it <code>HelloWorld</code>.</li>\n<li>Open that folder in vscode. (You can start vscode and drag the folder on top of it.)</li>\n<li>Toggle the <a href=\"https://code.visualstudio.com/docs/editor/integrated-terminal\" target=\"_blank\" rel=\"noopener noreferrer\">integrated terminal</a> using the <code>Ctrl</code> + <code>`</code> (Backtick).</li>\n<li>Enter the following command:</li>\n</ol>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"bash\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span></span>dotnet new console\n</code></pre></div></div><ol start=\"5\">\n<li>At this point you will have your initial Hello World program. You can run it using:</li>\n</ol>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"bash\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span></span>dotnet run\n</code></pre></div></div><p>You should see <code>Hello World!</code> printed in the terminal.</p>\n<ol start=\"6\">\n<li>Open the Explorer using <code>Ctrl</code> + <code>Shift</code> + <code>E</code></li>\n<li>Open <code>Program.cs</code> to see the source code. You should see:</li>\n</ol>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"csharp\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div><p>The first line imports the <code>System</code> library. That gives you access to <code>Console</code> later.</p>\n<p>After that a <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/namespace\" target=\"_blank\" rel=\"noopener noreferrer\">namespace</a> is started. It's a good practice to keep all your code in namespaces. The namespace here is <code>HelloWorld</code>. You can name it anything you want.</p>\n<p>Inside the namespace, a <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/class\" target=\"_blank\" rel=\"noopener noreferrer\">class</a> is defined called <code>Program</code>. You can name your classes anything you want.</p>\n<p>Inside the Program class there's a static function called <code>Main</code>. Main is your program entry point. When you called <code>dotnet run</code> earlier, it specifically looked for it.</p>\n<p>Lastly, there's the <code>WriteLine</code> function call on the <code>Console</code> class. Console is a <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members\" target=\"_blank\" rel=\"noopener noreferrer\">static class</a> which means you don't need an instance of it.</p>\n<p>To run your program through the vscode debugger, press <code>F5</code> and select <code>.NET Core</code> if prompted. That will generate a <code>.vscode</code> folder that contains the launch configuration. To check that the debugger works, you can add a breakpoint. Put your cursor on the <code>Console.WriteLine(&quot;Hello World!&quot;);</code> line and press <code>F9</code>. Now press <code>F5</code> and the program will pause on that line. You can press <code>F5</code> to resume the execution.</p>\n<h2 id=\"types\" tabindex=\"-1\">Types <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#types\" aria-hidden=\"true\">#</a></h2>\n<p>C# is a typed language. Here are some of the <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types\" target=\"_blank\" rel=\"noopener noreferrer\">built-in types</a>:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"csharp\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token class-name\"><span class=\"token keyword keyword-bool\">bool</span></span> isHappy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-float\">float</span></span> ratio <span class=\"token operator\">=</span> <span class=\"token number\">3.4f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-double\">double</span></span> humanCount <span class=\"token operator\">=</span> <span class=\"token number\">2.5d</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-char\">char</span></span> c <span class=\"token operator\">=</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> whatName <span class=\"token operator\">=</span> <span class=\"token string\">\"What is your name?\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div></div><p>You can declare your variables directly in your class' scope or functions:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"csharp\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> result <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> whatName <span class=\"token operator\">=</span> <span class=\"token string\">\"What is your name?\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div><p>Note that you first declare the type, then the variable name before assigning a value.</p>\n<h2 id=\"methods\" tabindex=\"-1\">Methods <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#methods\" aria-hidden=\"true\">#</a></h2>\n<p>You can declare <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/methods\" target=\"_blank\" rel=\"noopener noreferrer\">methods</a> in your class:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"csharp\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Program</span> p <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> num <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddFive</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-int\">int</span></span> <span class=\"token function\">AddFive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> a<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword keyword-return\">return</span> a <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> whatName <span class=\"token operator\">=</span> <span class=\"token string\">\"What is your name?\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div><p>Since the <code>AddFive</code> function is not static, I created an object instance of the Program class so that I could access it. I called the instance <code>p</code>. I stored the result in the <code>num</code> variable and printed that out.</p>\n<p>Notice the <code>public</code> keyword. When public isn't there, the default is <code>private</code>. For example <code>whatName</code> is currently private. That means you can't do <code>p.whatName</code> to access it.</p>\n<h2 id=\"if\" tabindex=\"-1\">If <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#if\" aria-hidden=\"true\">#</a></h2>\n<p>To make everything more interesting, you can use an <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else\" target=\"_blank\" rel=\"noopener noreferrer\">if statement</a>.</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"csharp\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Num is bigger than 10!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-else\">else</span> <span class=\"token keyword keyword-if\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Num is smaller than 5.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword keyword-else\">else</span>\n            <span class=\"token punctuation\">{</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Num is 5!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div><p>Here is a list of <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators\" target=\"_blank\" rel=\"noopener noreferrer\">comparison operators</a>: <code>==</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code>, <code>!=</code></p>\n<h2 id=\"loops\" tabindex=\"-1\">Loops <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#loops\" aria-hidden=\"true\">#</a></h2>\n<p>Here are a few loops:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"csharp\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token comment\">// for loop</span>\n<span class=\"token keyword keyword-for\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count: \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// You can also use an interpolated string:</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Count: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// while loop</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-while\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Count: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// foreach loop</span>\n<span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-foreach\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-int\">int</span></span> n <span class=\"token keyword keyword-in\">in</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Count: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">n</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div><h2 id=\"classes\" tabindex=\"-1\">Classes <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#classes\" aria-hidden=\"true\">#</a></h2>\n<p>You can separate your code into many classes. You can have multiple classes in one file, or you can split them into many files.</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"csharp\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Welcome</span> w <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello my good friend\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            w<span class=\"token punctuation\">.</span><span class=\"token function\">GreetName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jean-David\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Welcome</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-public\">public</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> message<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">GreetName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_message</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// It's a good practice to prefix private fields with an underscore.</span>\n        <span class=\"token keyword keyword-private\">private</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> _message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div><p>Some notes on the <a href=\"https://github.com/ktaranov/naming-convention/blob/master/C%23%20Coding%20Standards%20and%20Naming%20Conventions.md\" target=\"_blank\" rel=\"noopener noreferrer\">C# Coding Standards and Naming Conventions</a>. I personally don't follow it 100%, but it's a good starting point.</p>\n<h2 id=\"nuget\" tabindex=\"-1\">NuGet <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#nuget\" aria-hidden=\"true\">#</a></h2>\n<p>When working with C#, you'll often want to integrate various libraries in your projects. Let's refactor the previous example to accept a name from the launch arguments. That will allow you to start the application with <code>HelloWorld -n Jean-David</code>.</p>\n<p>There's a good library that makes this task be pretty trivial called <a href=\"https://www.nuget.org/packages/CommandLineParser/\" target=\"_blank\" rel=\"noopener noreferrer\">CommandLineParser</a>. If you look on that page, there's a tab for <code>.NET CLI</code>. It will give you the command that will install the CommandLineParser package:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"bash\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span></span>dotnet <span class=\"token function\">add</span> package CommandLineParser <span class=\"token parameter variable\">--version</span> <span class=\"token number\">2.8</span>.0\n</code></pre></div></div><p>After running that command, if you open the <code>HelloWorld.csproj</code> file, you will see:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"xml\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">></span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">></span></span>netcoreapp3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CommandLineParser<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.8.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">></span></span>\n</code></pre></div></div><p>Now look back in the CommandLineParser NuGet page and you'll see there's a <code>PackageReference</code> tab. That tab shows what to add to the <code>.csproj</code> file if you wanted to install a package manually without the CLI.</p>\n<p>If you edit the packages in a <code>.csproj</code>, you then have to run a restore:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"csharp\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span></span>dotnet restore\n</code></pre></div></div><p>Let's change the previous example to:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"csharp\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword keyword-using\">using</span> <span class=\"token namespace\">CommandLine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword keyword-namespace\">namespace</span> <span class=\"token namespace\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-public\">public</span> <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Options</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Option</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token char\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> Required <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> HelpText <span class=\"token operator\">=</span> <span class=\"token string\">\"Set the name to welcome.\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-string\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword keyword-get\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword keyword-set\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-static\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Parser<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">ParseArguments</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Options<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">WithParsed</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Options<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Welcome</span> w <span class=\"token operator\">=</span> <span class=\"token keyword keyword-new\">new</span> <span class=\"token constructor-invocation class-name\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello my good friend\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    w<span class=\"token punctuation\">.</span><span class=\"token function\">GreetName</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword keyword-class\">class</span> <span class=\"token class-name\">Welcome</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword keyword-public\">public</span> <span class=\"token function\">Welcome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> message<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            _message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-public\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword keyword-void\">void</span></span> <span class=\"token function\">GreetName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_message</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword keyword-private\">private</span> <span class=\"token class-name\"><span class=\"token keyword keyword-string\">string</span></span> _message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></div><p>You can run the application with:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"bash\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span></span>dotnet run <span class=\"token parameter variable\">-n</span> Jean-David\n</code></pre></div></div><p>If you want to be able to debug the application, you'll need to edit your vscode <code>launch.json</code> file. Open <code>.vscode/launch.json</code>. Edit the configuration to add the <code>args</code> in the array:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"json\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".NET Core Launch (console)\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"coreclr\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}/bin/Debug/netcoreapp3.1/HelloWorld.dll\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jean-David\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"internalConsole\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"stopAtEntry\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div></div><h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/csharp-crash-course/#conclusion\" aria-hidden=\"true\">#</a></h2>\n<p>If you liked this crash course or want to give me some feedback, feel free to drop by the Discord: <a href=\"https://discord.rashtal.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://discord.rashtal.com/</a>.</p>\n<hr />\n<p>TODO:</p>\n<ul>\n<li>Where to find help.</li>\n</ul>\n",
      "date_published": "2020-10-24T00:00:00Z"
    },{
      "id": "https://jeandavidmoisan.com/posts/korean-beef/",
      "url": "https://jeandavidmoisan.com/posts/korean-beef/",
      "title": "Korean Beef Recipe",
      "content_html": "<p>One of my favorite recipes. Easy to do, tastes great every time.</p>\n<h2 id=\"ingredients\" tabindex=\"-1\">Ingredients <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/korean-beef/#ingredients\" aria-hidden=\"true\">#</a></h2>\n<ul>\n<li>Rice, 2 Cup</li>\n<li>Ground Beef, 1.8 kg</li>\n<li>Garlic</li>\n<li>Cayenne Pepper</li>\n<li>Ground Ginger, 1/4 Teaspoon</li>\n<li>Brown Sugar, 1/4 Cup</li>\n<li>Soy Sauce, 1/4 Cup</li>\n<li>Sesame Oil, 2 Tablespoon</li>\n</ul>\n<h2 id=\"preparation\" tabindex=\"-1\">Preparation <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/korean-beef/#preparation\" aria-hidden=\"true\">#</a></h2>\n<p>Start cooking rice.</p>\n<p>Cook ground beef, season it with minced garlic, salt and pepper, and cayenne pepper to taste along with 1/4 teaspoon of ground ginger.</p>\n<p>On the side, whisk 1/4 cup of brown sugar, 1/4 cup of soy sauce and 2 tablespoon of sesame oil. Pour over beef and let simmer for a few minutes.</p>\n<p>Once the beef is ready, pour it on the rice and enjoy. It will make a few meals.</p>\n<h2 id=\"improvements\" tabindex=\"-1\">Improvements <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/korean-beef/#improvements\" aria-hidden=\"true\">#</a></h2>\n<p>Once you've done the recipe a few times and are comfortable with it, you can add more ingredients such as sweet peppers, carrots, celeries, mushrooms, or anything else you like. You can double the sauce and cook them on the side in it.</p>\n",
      "date_published": "2020-09-30T00:00:00Z"
    },{
      "id": "https://jeandavidmoisan.com/posts/weekend-projects/",
      "url": "https://jeandavidmoisan.com/posts/weekend-projects/",
      "title": "Weekend projects",
      "content_html": "<h2 id=\"prologue\" tabindex=\"-1\">Prologue <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/weekend-projects/#prologue\" aria-hidden=\"true\">#</a></h2>\n<p>In February 26, 2020, I gave a 15-minute talk for <a href=\"https://saglac.io/\" target=\"_blank\" rel=\"noopener noreferrer\">SaglacIO</a> in front of a bit more than 60 people. It was hosted by my former employer <a href=\"https://www.conformit.com/\" target=\"_blank\" rel=\"noopener noreferrer\">CONFORMiT</a>. My talk was about weekend projects for programmers.</p>\n<h2 id=\"intro\" tabindex=\"-1\">Intro <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/weekend-projects/#intro\" aria-hidden=\"true\">#</a></h2>\n<p>Before I get into that though, I want to backtrack a little bit. There's something really cool called speed paintings. In a relatively short amount of time, artists can produce some really nice artworks. You can watch a bit of the following video:</p>\n<div class=\"relative pb-16/9\">\n    <iframe class=\"absolute w-full h-full\" src=\"https://www.youtube.com/embed/u2dycJv55aQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n</div>\n<p>Something to notice specifically, the artist above, <a href=\"https://www.artstation.com/jjcanvas\" target=\"_blank\" rel=\"noopener noreferrer\">Jorge Jacinto</a>, starts by copy pasting his existing work, he moves and rotates things around. Really quickly he gets a composition going. Puts rough shapes in place. Over time, that composition barely changes. Even if you skip to the end of the video, the foundation is still there. In programming projects, it's really similar. You can work on something for a long time, and quite often, what you do early doesn't change too much. The initial work done on a project sets the ground for weeks to come.</p>\n<p>Another interesting concept I want to bring is this:</p>\n<div class=\"relative pb-16/9\">\n    <iframe class=\"absolute w-full h-full\" src=\"https://www.youtube.com/embed/IYVcjFhpsHc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n</div>\n<p>The Tibetan monks bring something really interesting to the table. They work on a project for weeks and right at the end, they destroy it. For them, it signifies having no attachments. I think that is a really important lesson to think about. Quite often, it's easy to wait until we find that one million dollar idea, but I think it's really good to work on simple projects and to let them go at the end.</p>\n<h2 id=\"definition\" tabindex=\"-1\">Definition <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/weekend-projects/#definition\" aria-hidden=\"true\">#</a></h2>\n<p>Now that I have brought these two concepts forward, this is where weekend projects come in. My definition of a weekend project is as follows:</p>\n<ul>\n<li>Short, roughly 4 to 8 hours long.</li>\n<li>Focused</li>\n<li>Instant results</li>\n<li>Rapid feedback</li>\n<li>No time to drop out</li>\n</ul>\n<p>When you start getting into weekend projects, it might take a bit more time than 4 to 8 hours, but try your best to not get carried away and control your scope. Keep it short and focused. You get faster as you build experience. Once you're ready, show it to your friends and get some feedback. Doing things like that means you don't have time to drop out. It's so common for programmers to start some never ending projects and it can get incredibly demotivating. With weekend projects, you can look back at your projects and get a sense of pride. You leave a trail behind you and that's how you grow.</p>\n<h2 id=\"weekend-projects-mindset\" tabindex=\"-1\">Weekend projects mindset <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/weekend-projects/#weekend-projects-mindset\" aria-hidden=\"true\">#</a></h2>\n<p>It's important to go through your life with a weekend project mindset. Try to notice fields that interest you. Take notes and do some research. Over time, you will get inspired and get new ideas. Build projects from those ideas and share them with others.</p>\n<h2 id=\"auto-composer-a.k.a.-cohortem\" tabindex=\"-1\">Auto composer a.k.a. Cohortem <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/weekend-projects/#auto-composer-a.k.a.-cohortem\" aria-hidden=\"true\">#</a></h2>\n<p>Back in 2012, I was reading a book called Measured Tones - The Interplay of Physics and Music by Ian Johnston. It's a really great book that I would recommend. It's written by an astrophysics professor and he explains music using his knowledge of physics. Reading this book, I started to wonder if I could code an algorithm to compose music. At the time, I had a few years of piano experience under my belt.</p>\n<p>In order to complete this project, I had only a few simple things to think about. How do I get the computer to emit a sound? How are good notes picked? And as a bonus, how do I generate beautifully engraved music sheets?</p>\n<p>At the time, I was learning python and I thought it would be a good language to use for the project. In terms of technology, I was in possession of a midi piano. Instead of having to generate sounds myself, I could connect to my piano using the midi protocol and get some well rendered audio sounds. Midi is quite simple. The main idea is that to play a note, you send a message with the note's number and how loud to play it. In python, doing a search for midi, I found that I could use <a href=\"https://www.pygame.org/\" target=\"_blank\" rel=\"noopener noreferrer\">pygame</a> and it would handle the midi protocol for me. First question answered, now on to the second one.</p>\n<p><img src=\"https://jeandavidmoisan.com/posts/weekend-projects/weekend-projects-01.png\" alt=\"img\" /></p>\n<p>How do I actually pick notes that sound good together? I was playing random notes on my piano and I quickly determined that I have two hands, I'd have to simulate that. The left hand tends to play chords and the right tends to play melodies. Let's say I would pick the <code>C</code> chord on the left hand, then the right hand could play a <code>C</code>, <code>E</code>, <code>F</code>, <code>G</code>, and the next <code>C</code> for the melody. No matter in which order those would be played, it still sounded good to me. If I transfer the first <code>C</code> to 0 and add one for each notes, I get <code>0</code>, <code>2</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>12</code>. It's pretty trivial to randomly pick a number from that list. This builds my melody. For the chord, it's just <code>0</code>, <code>6</code>, <code>12</code>. Or I can break it note by note and do <code>0</code>, <code>4</code>, <code>6</code>, <code>12</code>. I can play that last one forward or backward. To make the music sound better, I generated notes in groups of 4 quarter beats, called a measure. A single quarter beat can be divided in half beats, triplets, etc. I can gather notes together with many different timings and fit them in the measure. That creates some pretty legit music.</p>\n<p><img src=\"https://jeandavidmoisan.com/posts/weekend-projects/weekend-projects-02.png\" alt=\"img\" /></p>\n<p>Doing a quick search, I found a music engraving program called <a href=\"https://lilypond.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Lilypond</a>. It takes as it's input a text file and outputs a pdf with my music sheet. This is great for me because I can create a conversion table between the notes I generate and the Lilypond source code.</p>\n<p><img src=\"https://jeandavidmoisan.com/posts/weekend-projects/weekend-projects-03.png\" alt=\"img\" /></p>\n<p>So what does all of that sounds like?</p>\n<div class=\"relative pb-16/9\">\n    <iframe class=\"absolute w-full h-full\" src=\"https://www.youtube.com/embed/VFVto2PA1iU\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n</div>\n<p>It only took 4 hours to code that. I started to wonder what could be done to make it sound better. On the next day, I added a bit of variations to the notes so that they don't all get played with the same volume:</p>\n<div class=\"relative pb-16/9\">\n    <iframe class=\"absolute w-full h-full\" src=\"https://www.youtube.com/embed/NzroOqylc-U\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n</div>\n<p>Overall I was quite happy with how that project turned out. You might think that the project required quite a bit of previous knowledge and it did, but I want to point out that your life matters. You learn stuff, gain experience, and build greater and greater weekend projects.</p>\n<h2 id=\"binary-input\" tabindex=\"-1\">Binary Input <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/weekend-projects/#binary-input\" aria-hidden=\"true\">#</a></h2>\n<p>One day back in January 2020, I was sitting in front of my TV getting more and more pissed off as I was trying to search a video on YouTube using the apple TV. The remote has a very limited amount of buttons and typing anything takes forever with their input scheme. Is this what the modern world is reduced to? I hopped on <a href=\"https://discord.rashtal.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Discord</a> and started to brainstorm an idea that would revolutionize the world. Something that is taught in computer science 101. Binary search. It seemed to make so much sense. You start from a row of letters, set the cursor in the center and each consecutive left and right actions cuts the keyboard in half. For example, I want to write <code>apos</code>:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span></span>abcdefghijklm[]nopqrstuvwxyz\nabcdef[]ghijklmnopqrstuvwxyz\nabc[]defghijklmnopqrstuvwxyz\na[]bcdefghijklmnopqrstuvwxyz\n</code></pre></div></div><p>Four lefts give me the <code>a</code>. Now I want the <code>p</code>:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span></span>abcdefghijklm[]nopqrstuvwxyz\nabcdefghijklmnopqrst[]uvwxyz\nabcdefghijklmnopq[]rstuvwxyz\nabcdefghijklmno[]pqrstuvwxyz\n</code></pre></div></div><p>Right, left, left, right and bam a <code>p</code>. Now the <code>o</code>:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span></span>abcdefghijklm[]nopqrstuvwxyz\nabcdefghijklmnopqrst[]uvwxyz\nabcdefghijklmnopq[]rstuvwxyz\nabcdefghijklmno[]pqrstuvwxyz\n</code></pre></div></div><p>Right, left, left, left and there's the <code>o</code>. And last but not least the <code>s</code>:</p>\n<div class=\"code-select\"><div class=\"code-highlight\" lang=\"\"><pre class=\"syntax\"><code><span aria-hidden=\"true\" class=\"line-numbers\" style=\"counter-reset: linenumber 0\"><span></span><span></span><span></span><span></span></span>abcdefghijklm[]nopqrstuvwxyz\nabcdefghijklmnopqrst[]uvwxyz\nabcdefghijklmnopq[]rstuvwxyz\nabcdefghijklmnopqr[]stuvwxyz\n</code></pre></div></div><p>Without any optimizations, this mental exercise already felt quite fast.</p>\n<p>I thought about it for the next week and then I went ahead an implemented it live on stream. It took 4 hours in relaxed mode:</p>\n<div class=\"relative pb-16/9\">\n    <iframe class=\"absolute w-full h-full\" src=\"https://www.youtube.com/embed/6YO2cDFNMEk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe>\n</div>\n<p><img src=\"https://jeandavidmoisan.com/posts/weekend-projects/weekend-projects-04.gif\" alt=\"img\" /></p>\n<p>You can grab the builds on <a href=\"https://itch.io/\" target=\"_blank\" rel=\"noopener noreferrer\">itch.io</a>: https://apos.itch.io/binaryinput</p>\n<p>I posted about the project on <a href=\"https://tildes.net/\" target=\"_blank\" rel=\"noopener noreferrer\">Tildes</a> and Discord and got some great feedback. Here are some of the comments that I got:</p>\n<blockquote>\n<p>Okay, this is great, but I'm wondering how this is going to get distributed [soon] to the proprietary devices and systems where it's needed most. - Pistos</p>\n</blockquote>\n<blockquote>\n<p>Dude what. This makes so much sense. Perfect for TV remotes and gamepads. Did you come up with this concept? - TurdFerguson</p>\n</blockquote>\n<blockquote>\n<p>It's a brilliant concept. I want to see where you go with this. - ThatFanficGuy</p>\n</blockquote>\n<blockquote>\n<p>Could also be cool for Brain Computer Interfacing. - the Sage</p>\n</blockquote>\n<h2 id=\"weekend-projects-mindset-2\" tabindex=\"-1\">Weekend projects mindset 2 <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/weekend-projects/#weekend-projects-mindset-2\" aria-hidden=\"true\">#</a></h2>\n<p>As a bonus part of this talk, I want to suggest a technique if you work on a large code base. It can sometimes get quite hard to implement new features when you have to deal with a lot of existing code. Why not implement that new feature as a weekend project? You get results fast, prove the concept, then bring it into the main project. This gives the opportunity to refactor the code as you bring the code in.</p>\n<h2 id=\"groups-to-join\" tabindex=\"-1\">Groups to join <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/weekend-projects/#groups-to-join\" aria-hidden=\"true\">#</a></h2>\n<p>While it's ok to work alone, weekend projects are fun in a team too. Especially if you work with people online, it is quite frequent to start a project and see people disappear after days or weeks. With weekend projects, there's no time to drop off. You get in the zone, then you're done. I suggest Discord first as it's a great place to find active people. Discord communities are very dynamic. People constantly share their own projects which is good for motivation and inspiration. Tildes is a close second. They have weekly threads for people to share what they are working on. The community is still small and it soon feels like a tight group. Reddit is a bit more hit of miss. There's a bit more searching to do but there are people in there that are hidden gems.</p>\n<ul>\n<li><a href=\"https://discord.rashtal.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Rashtal Discord</a> <a href=\"https://discord.gg/tsuucV4\" target=\"_blank\" rel=\"noopener noreferrer\">MonoGame Discord</a></li>\n<li><a href=\"https://tildes.net/\" target=\"_blank\" rel=\"noopener noreferrer\">Tildes</a></li>\n<li><a href=\"https://www.reddit.com/r/INAT/\" target=\"_blank\" rel=\"noopener noreferrer\">Reddit INAT</a></li>\n</ul>\n<h2 id=\"conclusion\" tabindex=\"-1\">Conclusion <a class=\"direct-link\" href=\"https://jeandavidmoisan.com/posts/weekend-projects/#conclusion\" aria-hidden=\"true\">#</a></h2>\n<p>I would like to end this by asking you one question: What did you make today?</p>\n<p><img src=\"https://jeandavidmoisan.com/posts/weekend-projects/weekend-projects-05.png\" alt=\"img\" /></p>\n",
      "date_published": "2020-04-16T00:00:00Z"
    },{
      "id": "https://jeandavidmoisan.com/posts/using-a-graphics-tablet-as-a-programming-tool/",
      "url": "https://jeandavidmoisan.com/posts/using-a-graphics-tablet-as-a-programming-tool/",
      "title": "Using a graphics tablet as a programming tool",
      "content_html": "<p>I've been meaning to share this tip for a while. About one year ago, I discovered a software called <a href=\"https://github.com/serge-rgb/milton\" target=\"_blank\" rel=\"noopener noreferrer\">Milton</a>. It's a drawing application that lets you draw on an infinite canvas with an amazing zooming function. It's incredibly fast and the interface doesn't get in your way. It turns out it's really useful for taking notes or thinking about how to solve problems visually.</p>\n<p>Here is a snapshot of a small portion of the notes I took while working on my game <a href=\"http://rashtal.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Rashtal</a>:</p>\n<p><img src=\"https://jeandavidmoisan.com/posts/using-a-graphics-tablet-as-a-programming-tool/milton-01.png\" alt=\"img\" /></p>\n<p>To take notes easily, I have the Wacom Bamboo as my graphics tablet. If you don't have a graphics tablet yet, I'd suggest getting one. Even the cheapest one should do the job perfectly.</p>\n<p>Before using Milton, I would use a pen and paper, but for some complex algorithms, I find the infinite canvas to be much easier to work with. Once I've been working on a project for a while, the canvas starts to look really impressive.</p>\n<p>I find that being able to see all the notes I've taken since starting to work on a project really helps me stay motivated. Sometimes I can spend days barely writing any lines of code but then I look at my notes and I can see my thought process and all the planning I went through. Even the simplest lines of code can take a long time to figure out and I tend to forget that.</p>\n<hr />\n<p>Thanks for taking the time to read this and good luck with your algorithm planning!</p>\n",
      "date_published": "2018-03-14T00:00:00Z"
    }
  ]
}
